// @generated by protobuf-ts 2.9.3 with parameter long_type_string
// @generated from protobuf file "locator.proto" (syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * Locator
 *
 * @generated from protobuf message LocateRequest
 */
export interface LocateRequest {
    /**
     * @generated from protobuf field: double l = 1;
     */
    l: number;
    /**
     * @generated from protobuf field: double b = 2;
     */
    b: number;
    /**
     * @generated from protobuf field: double cLat = 3;
     */
    cLat: number;
    /**
     * @generated from protobuf field: double cLng = 4;
     */
    cLng: number;
}
/**
 * @generated from protobuf message Locate
 */
export interface Locate {
    /**
     * @generated from protobuf field: int32 trip_id = 1;
     */
    tripId: number;
    /**
     * @generated from protobuf field: double lat = 2;
     */
    lat: number;
    /**
     * @generated from protobuf field: double lng = 3;
     */
    lng: number;
    /**
     * @generated from protobuf field: int32 course = 4;
     */
    course: number;
}
/**
 * @generated from protobuf message LocateMessage
 */
export interface LocateMessage {
    /**
     * @generated from protobuf field: repeated Locate locates = 1;
     */
    locates: Locate[];
    /**
     * @generated from protobuf field: int64 timestamp = 2;
     */
    timestamp: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class LocateRequest$Type extends MessageType<LocateRequest> {
    constructor() {
        super("LocateRequest", [
            { no: 1, name: "l", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 2, name: "b", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "cLat", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "cLng", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<LocateRequest>): LocateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.l = 0;
        message.b = 0;
        message.cLat = 0;
        message.cLng = 0;
        if (value !== undefined)
            reflectionMergePartial<LocateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LocateRequest): LocateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* double l */ 1:
                    message.l = reader.double();
                    break;
                case /* double b */ 2:
                    message.b = reader.double();
                    break;
                case /* double cLat */ 3:
                    message.cLat = reader.double();
                    break;
                case /* double cLng */ 4:
                    message.cLng = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LocateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* double l = 1; */
        if (message.l !== 0)
            writer.tag(1, WireType.Bit64).double(message.l);
        /* double b = 2; */
        if (message.b !== 0)
            writer.tag(2, WireType.Bit64).double(message.b);
        /* double cLat = 3; */
        if (message.cLat !== 0)
            writer.tag(3, WireType.Bit64).double(message.cLat);
        /* double cLng = 4; */
        if (message.cLng !== 0)
            writer.tag(4, WireType.Bit64).double(message.cLng);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LocateRequest
 */
export const LocateRequest = new LocateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Locate$Type extends MessageType<Locate> {
    constructor() {
        super("Locate", [
            { no: 1, name: "trip_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "lat", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "lng", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "course", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<Locate>): Locate {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.tripId = 0;
        message.lat = 0;
        message.lng = 0;
        message.course = 0;
        if (value !== undefined)
            reflectionMergePartial<Locate>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Locate): Locate {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 trip_id */ 1:
                    message.tripId = reader.int32();
                    break;
                case /* double lat */ 2:
                    message.lat = reader.double();
                    break;
                case /* double lng */ 3:
                    message.lng = reader.double();
                    break;
                case /* int32 course */ 4:
                    message.course = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Locate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 trip_id = 1; */
        if (message.tripId !== 0)
            writer.tag(1, WireType.Varint).int32(message.tripId);
        /* double lat = 2; */
        if (message.lat !== 0)
            writer.tag(2, WireType.Bit64).double(message.lat);
        /* double lng = 3; */
        if (message.lng !== 0)
            writer.tag(3, WireType.Bit64).double(message.lng);
        /* int32 course = 4; */
        if (message.course !== 0)
            writer.tag(4, WireType.Varint).int32(message.course);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Locate
 */
export const Locate = new Locate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LocateMessage$Type extends MessageType<LocateMessage> {
    constructor() {
        super("LocateMessage", [
            { no: 1, name: "locates", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Locate },
            { no: 2, name: "timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/ }
        ]);
    }
    create(value?: PartialMessage<LocateMessage>): LocateMessage {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.locates = [];
        message.timestamp = "0";
        if (value !== undefined)
            reflectionMergePartial<LocateMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LocateMessage): LocateMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated Locate locates */ 1:
                    message.locates.push(Locate.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 timestamp */ 2:
                    message.timestamp = reader.int64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LocateMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated Locate locates = 1; */
        for (let i = 0; i < message.locates.length; i++)
            Locate.internalBinaryWrite(message.locates[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 timestamp = 2; */
        if (message.timestamp !== "0")
            writer.tag(2, WireType.Varint).int64(message.timestamp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LocateMessage
 */
export const LocateMessage = new LocateMessage$Type();
/**
 * @generated ServiceType for protobuf service Locator
 */
export const Locator = new ServiceType("Locator", [
    { name: "Locate", options: {}, I: LocateRequest, O: LocateMessage }
]);
